version: "3"
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    networks:
      - network
    container_name: zookeeper
    ports:
      - "2081:2081"
    environment:
      ZOOKEEPER_CLIENT_PORT: "2081"
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test:
        [
          "CMD",
          "bash",
          "-c",
          "echo 'ruok' | nc zookeeper 2081"
        ]
      interval: 10s
      timeout: 5s
      retries: 5
  broker1:
    image: confluentinc/cp-kafka:7.5.0
    container_name: broker1
    networks:
      - network
    hostname: broker1
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2081"
      KAFKA_LISTENERS: "INTERNAL://broker1:9092"
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://broker1:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "bash", "-c", "nc -z broker1 9092" ]
      interval: 10s
      timeout: 5s
      retries: 5
  broker2:
    image: confluentinc/cp-kafka:7.5.0
    container_name: broker2
    networks:
      - network
    hostname: broker2
    ports:
      - "19092:19092"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2081"
      KAFKA_LISTENERS: "INTERNAL://broker2:19092"
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://broker2:19092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "bash", "-c", "nc -z broker2 19092" ]
      interval: 10s
      timeout: 5s
      retries: 5
  broker3:
    image: confluentinc/cp-kafka:7.5.0
    container_name: broker3
    networks:
      - network
    hostname: broker3
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2081"
      KAFKA_LISTENERS: "INTERNAL://broker3:29092"
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://broker3:29092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "bash", "-c", "nc -z broker3 29092" ]
      interval: 10s
      timeout: 5s
      retries: 5
  control-center:
    image: confluentinc/cp-enterprise-control-center:7.5.0
    hostname: control-center
    container_name: control-center
    depends_on:
      broker1:
        condition: service_healthy
      broker2:
        condition: service_healthy
      broker3:
        condition: service_healthy
    ports:
      - "9021:9021"
    restart: always
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: "broker1:9092,broker2:19092,broker3:29092"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021
    networks:
      - network
  producer:
    container_name: producer
    networks:
      - network
    ports:
      - "5950:5950"
    build:
      context: .
      dockerfile: ./kafka_producer/Dockerfile
    environment:
      PYTHONUNBUFFERED: 1
      FINNHUB_API_KEY: "${FINNHUB_API_KEY}"
    depends_on:
      broker1:
        condition: service_healthy
      broker2:
        condition: service_healthy
      broker3:
        condition: service_healthy
  jobmanager:
    build:
      context: .
      dockerfile: ./stream_processing/Dockerfile
    networks:
      - network
    ports:
      - "8081:8081"
    command: jobmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
  taskmanager:
    build:
      context: .
      dockerfile: ./stream_processing/Dockerfile
    networks:
      - network
    depends_on:
      - jobmanager
    command: taskmanager
    scale: 1
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        taskmanager.numberOfTaskSlots: 2   
  flink-sql:
    build:
      context: .
      dockerfile: ./stream_processing/Dockerfile
    container_name: flink-sql
    command: bin/sql-client.sh
    networks:
      - network
    depends_on:
      broker1:
        condition: service_healthy
      broker2:
        condition: service_healthy
      broker3:
        condition: service_healthy
      producer:
        condition: service_started
      jobmanager:
        condition: service_started
    environment:
      - FACTOR=3
      - | 
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        rest.address: jobmanager 
    stdin_open: true
    tty: true
networks:
  network:
